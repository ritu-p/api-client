package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
)

const remote_service = "https://example.com/api" // Replace with actual URL

type User struct {
	ID    string `json:"id,omitempty"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type UserClient interface {
	CreateUser(user *User) (*User, error)
	UpdateUser(id string, user *User) (*User, error)
	GetUser(id string) (*User, error)
}

type userClient struct {
	baseURL string
	client  *http.Client
}

func NewUserClient() UserClient {
	return &userClient{
		baseURL: remote_service,
		client:  &http.Client{},
	}
}

func (u *userClient) CreateUser(user *User) (*User, error) {
	body, err := json.Marshal(user)
	if err != nil {
		return nil, err
	}
	resp, err := u.client.Post(fmt.Sprintf("%s/users", u.baseURL), "application/json", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusCreated {
		return nil, fmt.Errorf("unexpected status: %s", resp.Status)
	}
	var created User
	if err := json.NewDecoder(resp.Body).Decode(&created); err != nil {
		return nil, err
	}
	return &created, nil
}

func (u *userClient) UpdateUser(id string, user *User) (*User, error) {
	body, err := json.Marshal(user)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest(http.MethodPut, fmt.Sprintf("%s/users/%s", u.baseURL, id), bytes.NewReader(body))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := u.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status: %s", resp.Status)
	}
	var updated User
	if err := json.NewDecoder(resp.Body).Decode(&updated); err != nil {
		return nil, err
	}
	return &updated, nil
}

func (u *userClient) GetUser(id string) (*User, error) {
	resp, err := u.client.Get(fmt.Sprintf("%s/users/%s", u.baseURL, id))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status: %s", resp.Status)
	}
	var user User
	if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {
		return nil, err
	}
	return &user, nil
}
